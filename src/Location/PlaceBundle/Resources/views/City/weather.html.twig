{% extends 'LocationPlaceBundle::layout.html.twig' %}

{% block title %}{{title}}{% endblock%}

{% block description %}{{description}}{% endblock %}

{% block body %}
    
    <h1>{{title}}</h1>
    <ul class="nav nav-tabs">
        <li class="active"><a href="#{{weather.current.date}}" data-toggle="tab">{{weather.current.date|date("H:i")}}</a></li>
        
        {% for hourly in weather.hourly %}
            <li><a href="#{{hourly.date}}" data-toggle="tab">{{hourly.date|date("H:i")}}</a></li>
        {% endfor %}

    </ul>
    
    <div class="tab-content">
        <div role="tabpanel" class="row weather tab-pane fade in active" id="{{weather.current.date}}">
            <div class="col-xs-12 col-lg-6">
                <div class="temperature"><img src="{{weather.current.icon}}" /><strong>{{weather.current.temp}}&deg;C</strong>, <small class="text-muted">{{weather.current.description}}</small></div>
            </div>
            <div class="col-xs-12 col-lg-6 text-muted">
                <p><strong>{{'wind'|trans}}:</strong> {{weather.current.wind_speed}} {{'wind dimension'|trans}}, {{wind_directions[weather.current.wind_side]}}</p>
                <p><strong>{{'pressure'|trans}}:</strong> {{weather.current.pressure}} {{'pressure dimension'|trans}}</p>
                <p><strong>{{'humidity'|trans}}:</strong> {{weather.current.humidity}} %</p>
            </div>
        </div>

        {% for hourly in weather.hourly %}
            <div role="tabpanel" class="row weather tab-pane fade" id="{{hourly.date}}">
                <div class="col-xs-12 col-lg-6">
                    <div class="temperature"><img src="{{hourly.icon}}" /><strong>{{hourly.temp}}&deg;C</strong>, <small class="text-muted">{{hourly.description}}</small></div>
                </div>
                <div class="col-xs-12 col-lg-6 text-muted">
                    <p><strong>{{'wind'|trans}}:</strong> {{hourly.wind_speed}} {{'wind dimension'|trans}}, {{wind_directions[hourly.wind_side]}}</p>
                    <p><strong>{{'pressure'|trans}}:</strong> {{hourly.pressure}} {{'pressure dimension'|trans}}</p>
                    <p><strong>{{'humidity'|trans}}:</strong> {{hourly.humidity}} %</p>
                </div>
            </div>
        {% endfor %}
    </div>
    
    {{ include('LocationPlaceBundle::Banner/top.html.twig') }}
    
    {{ google_map(map) }}
    
    
    
    {{ include('LocationPlaceBundle::Social/bookmarks.html.twig') }}
    
    {% if cities_nearest|length %}
    
        <h2>{% trans %}cities_nearest{% endtrans %}</h2>
        
        <p>
            <ul>
            {% for city_nearest in cities_nearest %}
                <li><a href="{{ path('location_city_weather', { 'id': city_nearest.id }) }}">{{ city_nearest.name }}</a> ({{coordinate.getDistance({'lat': city.lat, 'lng': city.lng}, {'lat': city_nearest.lat, 'lng': city_nearest.lng}, 'km', 1)}} {{ 'km'|trans }})</li>
            {% endfor %}
            </ul>
        </p>
    
    {% endif %}
    
    <style>
      .gm-style-iw h2 {
        text-align: center;
      }
 
    </style>

    <script type="text/javascript">
        $(document).ready(function() {
            
            var map = {{vars['map']}};

            var geoJSON;
            var request;
            var gettingData = false;
            var openWeatherMapKey = '{{weather['key']}}';
            
            var checkIfDataRequested = function() {
              // Stop extra requests being sent
              while (gettingData === true) {
                request.abort();
                gettingData = false;
              }
              getCoords();
            };
            
            google.maps.event.addListener(map, 'idle', checkIfDataRequested);
            
            map.data.addListener('click', function(event) {
                infowindow.setContent(
                 "<h2><img src=" + event.feature.getProperty("icon") + "><strong>" + Math.round(event.feature.getProperty("temperature")) + "&deg;C</strong></h2>"
                 + "<strong>{{'wind'|trans}}:</strong> " + event.feature.getProperty("windSpeed") + " {{'wind dimension'|trans}}<br/>"
                 + "<strong>{{'pressure'|trans}}:</strong> " + event.feature.getProperty("pressure") + " {{'pressure dimension'|trans}}<br/>"
                 + "<strong>{{'humidity'|trans}}:</strong> " + event.feature.getProperty("humidity") + "%"
                 );
                infowindow.setOptions({
                    position:{
                      lat: event.latLng.lat(),
                      lng: event.latLng.lng()
                    },
                    pixelOffset: {
                      width: 0,
                      height: -15
                    }
                  });
                infowindow.open(map);
            });

            // Get the coordinates from the Map bounds
            var getCoords = function() {
              var bounds = map.getBounds();
              var NE = bounds.getNorthEast();
              var SW = bounds.getSouthWest();
              getWeather(NE.lat(), NE.lng(), SW.lat(), SW.lng());
            };

            // Make the weather request
            var getWeather = function(northLat, eastLng, southLat, westLng) {
              gettingData = true;
              var requestString = "http://api.openweathermap.org/data/2.5/box/city?bbox="
                                  + westLng + "," + northLat + "," //left top
                                  + eastLng + "," + southLat + "," //right bottom
                                  + map.getZoom()
                                  + "&cluster=yes&format=json"
                                  + "&APPID=" + openWeatherMapKey;
              request = new XMLHttpRequest();
              request.onload = proccessResults;
              request.open("get", requestString, true);
              request.send();
            };

            // Take the JSON results and proccess them
            var proccessResults = function() {
              console.log(this);
              var results = JSON.parse(this.responseText);
              if (results.list.length > 0) {
                  resetData();
                  for (var i = 0; i < results.list.length; i++) {
                    geoJSON.features.push(jsonToGeoJson(results.list[i]));
                  }
                  drawIcons(geoJSON);
              }
            };

            var infowindow = new google.maps.InfoWindow();

            // For each result that comes back, convert the data to geoJSON
            var jsonToGeoJson = function (weatherItem) {
              var feature = {
                type: "Feature",
                properties: {
                  city: weatherItem.name,
                  weather: weatherItem.weather[0].main,
                  temperature: weatherItem.main.temp,
                  min: weatherItem.main.temp_min,
                  max: weatherItem.main.temp_max,
                  humidity: weatherItem.main.humidity,
                  pressure: weatherItem.main.pressure,
                  windSpeed: weatherItem.wind.speed,
                  windDegrees: weatherItem.wind.deg,
                  windGust: weatherItem.wind.gust,
                  icon: "http://openweathermap.org/img/w/"
                        + weatherItem.weather[0].icon  + ".png",
                  coordinates: [weatherItem.coord.lon, weatherItem.coord.lat]
                },
                geometry: {
                  type: "Point",
                  coordinates: [weatherItem.coord.lon, weatherItem.coord.lat]
                }
              };
              // Set the custom marker icon
              map.data.setStyle(function(feature) {
                return {
                  icon: {
                    url: feature.getProperty('icon')
                  }
                };
              });

              // returns object
              return feature;
            };

            // Add the markers to the map
            var drawIcons = function (weather) {
               map.data.addGeoJson(geoJSON);
               // Set the flag to finished
               gettingData = false;
            };

            // Clear data layer and geoJSON
            var resetData = function () {
              geoJSON = {
                type: "FeatureCollection",
                features: []
              };
              map.data.forEach(function(feature) {
                map.data.remove(feature);
              });
            };
        });
    </script>
    
{% endblock %}


